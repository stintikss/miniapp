import React, { useState, useEffect } from 'react';
import { WebApp } from '@tma.js/sdk';
import './App.css';

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
const HomePage = ({ onNavigate }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
    WebApp.ready();
    WebApp.expand();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (WebApp.initDataUnsafe?.user) {
      setUser(WebApp.initDataUnsafe.user);
    }
  }, []);

  const handleMainButton = () => {
    WebApp.MainButton.setText('–û–¢–ö–†–´–¢–¨ –ü–†–û–§–ò–õ–¨');
    WebApp.MainButton.show();
    WebApp.MainButton.onClick(() => onNavigate('profile'));
  };

  const handleBackButton = () => {
    WebApp.BackButton.hide();
    WebApp.MainButton.hide();
  };

  return (
    <div className="page home-page">
      <div className="header">
        <h1>üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h1>
        {user && (
          <div className="user-info">
            <p>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</p>
          </div>
        )}
      </div>
      
      <div className="content">
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –º–∏–Ω–∏-–∞–ø–∫—É!</p>
        
        <div className="button-grid">
          <button 
            className="nav-button primary"
            onClick={() => onNavigate('about')}
          >
            üìñ –û –Ω–∞—Å
          </button>
          
          <button 
            className="nav-button secondary"
            onClick={() => onNavigate('services')}
          >
            üõ†Ô∏è –£—Å–ª—É–≥–∏
          </button>
          
          <button 
            className="nav-button accent"
            onClick={() => onNavigate('contact')}
          >
            üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã
          </button>
          
          <button 
            className="nav-button special"
            onClick={handleMainButton}
          >
            üéØ –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
          </button>
        </div>
      </div>
    </div>
  );
};

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –Ω–∞—Å"
const AboutPage = ({ onNavigate }) => {
  useEffect(() => {
    WebApp.BackButton.show();
    WebApp.BackButton.onClick(() => onNavigate('home'));
    WebApp.MainButton.hide();
  }, [onNavigate]);

  return (
    <div className="page about-page">
      <div className="header">
        <h1>üìñ –û –Ω–∞—Å</h1>
      </div>
      
      <div className="content">
        <div className="info-card">
          <h2>–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è</h2>
          <p>–ú—ã —Å–æ–∑–¥–∞–µ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è Telegram Mini Apps.</p>
          <p>–ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Telegram –µ—â–µ —É–¥–æ–±–Ω–µ–µ!</p>
        </div>
        
        <div className="features">
          <div className="feature">
            <span className="feature-icon">üöÄ</span>
            <h3>–ë—ã—Å—Ç—Ä–æ</h3>
            <p>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</p>
          </div>
          <div className="feature">
            <span className="feature-icon">üîí</span>
            <h3>–ë–µ–∑–æ–ø–∞—Å–Ω–æ</h3>
            <p>–ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
          </div>
          <div className="feature">
            <span className="feature-icon">üí°</span>
            <h3>–£–¥–æ–±–Ω–æ</h3>
            <p>–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–£—Å–ª—É–≥–∏"
const ServicesPage = ({ onNavigate }) => {
  useEffect(() => {
    WebApp.BackButton.show();
    WebApp.BackButton.onClick(() => onNavigate('home'));
    WebApp.MainButton.hide();
  }, [onNavigate]);

  const services = [
    { id: 1, name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Mini Apps', icon: 'üíª', description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è Telegram' },
    { id: 2, name: '–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤', icon: 'üé®', description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –¥–∏–∑–∞–π–Ω' },
    { id: 3, name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', icon: 'üõ†Ô∏è', description: '24/7 –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞' },
    { id: 4, name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', icon: 'üìã', description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏' }
  ];

  return (
    <div className="page services-page">
      <div className="header">
        <h1>üõ†Ô∏è –£—Å–ª—É–≥–∏</h1>
      </div>
      
      <div className="content">
        <div className="services-grid">
          {services.map(service => (
            <div key={service.id} className="service-card">
              <div className="service-icon">{service.icon}</div>
              <h3>{service.name}</h3>
              <p>{service.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
const ContactPage = ({ onNavigate }) => {
  useEffect(() => {
    WebApp.BackButton.show();
    WebApp.BackButton.onClick(() => onNavigate('home'));
    WebApp.MainButton.hide();
  }, [onNavigate]);

  const handleContact = (type) => {
    switch(type) {
      case 'telegram':
        WebApp.openTelegramLink('https://t.me/your_channel');
        break;
      case 'email':
        WebApp.openLink('mailto:info@example.com');
        break;
      case 'website':
        WebApp.openLink('https://example.com');
        break;
      default:
        break;
    }
  };

  return (
    <div className="page contact-page">
      <div className="header">
        <h1>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h1>
      </div>
      
      <div className="content">
        <div className="contact-info">
          <div className="contact-card">
            <h3>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</h3>
            <p>–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º!</p>
          </div>
          
          <div className="contact-buttons">
            <button 
              className="contact-button telegram"
              onClick={() => handleContact('telegram')}
            >
              üì± Telegram –∫–∞–Ω–∞–ª
            </button>
            
            <button 
              className="contact-button email"
              onClick={() => handleContact('email')}
            >
              üìß Email
            </button>
            
            <button 
              className="contact-button website"
              onClick={() => handleContact('website')}
            >
              üåê –í–µ–±-—Å–∞–π—Ç
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü—Ä–æ—Ñ–∏–ª—å"
const ProfilePage = ({ onNavigate }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    WebApp.BackButton.show();
    WebApp.BackButton.onClick(() => onNavigate('home'));
    WebApp.MainButton.hide();
    
    if (WebApp.initDataUnsafe?.user) {
      setUser(WebApp.initDataUnsafe.user);
    }
  }, [onNavigate]);

  return (
    <div className="page profile-page">
      <div className="header">
        <h1>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h1>
      </div>
      
      <div className="content">
        {user ? (
          <div className="profile-card">
            <div className="profile-avatar">
              {user.photo_url ? (
                <img src={user.photo_url} alt="Avatar" />
              ) : (
                <div className="avatar-placeholder">üë§</div>
              )}
            </div>
            
            <div className="profile-info">
              <h2>{user.first_name} {user.last_name || ''}</h2>
              <p>ID: {user.id}</p>
              {user.username && <p>@{user.username}</p>}
              <p>–Ø–∑—ã–∫: {user.language_code}</p>
            </div>
          </div>
        ) : (
          <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
        )}
      </div>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
function App() {
  const [currentPage, setCurrentPage] = useState('home');

  const navigateTo = (page) => {
    setCurrentPage(page);
  };

  const renderPage = () => {
    switch(currentPage) {
      case 'home':
        return <HomePage onNavigate={navigateTo} />;
      case 'about':
        return <AboutPage onNavigate={navigateTo} />;
      case 'services':
        return <ServicesPage onNavigate={navigateTo} />;
      case 'contact':
        return <ContactPage onNavigate={navigateTo} />;
      case 'profile':
        return <ProfilePage onNavigate={navigateTo} />;
      default:
        return <HomePage onNavigate={navigateTo} />;
    }
  };

  return (
    <div className="App">
      {renderPage()}
    </div>
  );
}

export default App;
